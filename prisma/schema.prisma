// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_TEST")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(PLAYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Player specific fields
  phone       String?
  instagram   String?
  inQueue     Boolean  @default(true)
  sellerId    Int?     // Seller que indicou este player
  seller      User?    @relation("SellerPlayers", fields: [sellerId], references: [id])
  players     User[]   @relation("SellerPlayers") // Players indicados por este seller

  // Simulator relation
  simulatorId Int?
  simulator   Simulator? @relation(fields: [simulatorId], references: [id])

  // Queue relation
  Queues Queue[]
  
  // Sale records relation
  SellerSales SaleRecord[] @relation("SellerSales")
  PlayerSales SaleRecord[] @relation("PlayerSales")
}

model Player {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  phone       String?
  instagram   String?
  inQueue     Boolean    @default(true)
  createdAt   DateTime   @default(now())

  simulatorId Int?
  simulator   Simulator? @relation(fields: [simulatorId], references: [id])

  Queues      Queue[]
}

model Simulator {
  id        Int        @id @default(autoincrement())
  name      String
  active    Boolean    @default(true)

  Users       User[]       // usuários associados ao simulador
  Players     Player[]     // players associados ao simulador
  Queue       Queue[]      // fila associada ao simulador
  SaleRecords SaleRecord[] // registros de venda do simulador
}

model Queue {
  id          Int        @id @default(autoincrement())
  PlayerId    Int?
  Player      Player?    @relation(fields: [PlayerId], references: [id])
  UserId      Int
  User        User       @relation(fields: [UserId], references: [id])

  SimulatorId Int
  Simulator   Simulator  @relation(fields: [SimulatorId], references: [id])

  position    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Timed queue fields
  status      QueueStatus @default(WAITING)
  turnStartAt DateTime?
  confirmedAt DateTime?
  expiresAt   DateTime?
  
  // For re-queue tracking
  missedTurns Int        @default(0)
  totalWaitTime Int      @default(0) // in seconds
  
  // Time and payment fields
  timeMinutes Int        @default(5) // tempo selecionado em minutos
  amountPaid  Float      @default(0) // valor pago pelo usuário
}

enum UserRole {
  MASTER
  ADMIN
  SELLER
  PLAYER
}

model SaleRecord {
  id          Int       @id @default(autoincrement())
  sellerId    Int
  seller      User      @relation("SellerSales", fields: [sellerId], references: [id])
  playerId    Int
  player      User      @relation("PlayerSales", fields: [playerId], references: [id])
  simulatorId Int
  simulator   Simulator @relation(fields: [simulatorId], references: [id])
  amountPaid  Float
  createdAt   DateTime  @default(now())
}

model TimePattern {
  id          Int      @id @default(autoincrement())
  name        String   // ex: "Padrão 1", "Promocional"
  timeMinutes Int      // tempo em minutos
  price       Float    // preço
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum QueueStatus {
  WAITING
  ACTIVE
  CONFIRMED
  MISSED
  COMPLETED
}
